generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  username     String     @unique
  email        String     @unique
  passwordHash String
  isAdmin      Boolean    @default(false)
  address      Json?
  createdAt    DateTime   @default(now())

  orders       Order[]
  emailLogs    EmailLog[]
}

model Collection {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  description String
  createdAt   DateTime   @default(now())

  posters     Poster[]
}

model Poster {
  id           String       @id @default(uuid())
  title        String
  slug         String       @unique
  description  String
  imageUrl     String
  squareImg    String?
  posterImg    String?
  mockupImg    String[]
  tags         String[]     @db.Text
  collectionId String
  createdAt    DateTime     @default(now())

  collection   Collection   @relation(fields: [collectionId], references: [id])
  posterSizes  PosterSize[]
  orderItems   OrderItem[]
}

model Size {
  id       String       @id @default(uuid())
  name     String
  posterSizes PosterSize[]
}

model PosterSize {
  id              String   @id @default(uuid())
  posterId        String
  sizeId          String
  basePrice       Decimal  @db.Decimal(10,2)
  frameAvailable  Boolean  @default(false)
  framePrice      Decimal? @db.Decimal(10,2)

  poster          Poster   @relation(fields: [posterId], references: [id])
  size            Size     @relation(fields: [sizeId], references: [id])
  orderItems      OrderItem[]
}

model Order {
  id          String      @id @default(uuid())
  userId      String?
  email       String
  address     String
  name        String
  number      String
  status      Status
  payment     Payment
  amount      Float
  createdAt   DateTime    @default(now())

  user        User?       @relation(fields: [userId], references: [id])
  items       OrderItem[]
}

model OrderItem {
  id            String     @id @default(uuid())
  orderId       String
  posterId      String
  posterSizeId  String
  quantity      Int
  withFrame     Boolean    // Whether the user selected a frame
  finalPrice    Decimal    @db.Decimal(10,2) // base + optional frame price

  order         Order      @relation(fields: [orderId], references: [id])
  poster        Poster     @relation(fields: [posterId], references: [id])
  posterSize    PosterSize @relation(fields: [posterSizeId], references: [id])
}

model EmailLog {
  id        String      @id @default(uuid())
  userId    String
  type      EmailType
  subject   String
  body      String
  sentAt    DateTime

  user      User        @relation(fields: [userId], references: [id])
}

enum Status {
  PENDING
  COMPLETED
  CANCELLED
  SHIPPED
  FAILED
}

enum Payment {
  PENDING
  COMPLETED
  FAILED
}

enum EmailType {
  ORDER_CONFIRMED
  ORDER_SHIPPED
  ORDER_CANCELLED
  PASSWORD_RESET
  OTHER
}
